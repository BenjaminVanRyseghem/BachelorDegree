/* The following code was generated by JFlex 1.4.3 on 10/5/11 2:54 PM */

/*****************************************************
 * Analyseur lexical pour Init version simple
 * fichier de description pour JFlex
 * produit anLexInit/ScannerInit.java
 * M. Nebut
 * 03/04 revu 09/09
 ****************************************************/

/***********************************************************************
 * Première partie : code utilisateur inclus tel quel dans le fichier
 * .java généré. On met typiquement ici les déclarations de paquetage
 * (package) et les importations de classes (import).
 ***********************************************************************/

// déclaration du paquetage auquel appartient la classe générée
package init.analyseurs;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/5/11 2:54 PM from the specification file
 * <tt>/Users/benjamin/Documents/Scholarship/COMPIL/TP2/tp2/init/spec/anLexInit.lex</tt>
 */
public class ScannerInit implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\13\1\3\1\2\1\0\1\3\1\1\16\13\4\0\1\3\3\0"+
    "\1\12\7\0\1\25\3\0\12\14\1\15\1\24\1\0\1\16\3\0"+
    "\32\12\4\0\1\12\1\0\1\10\2\12\1\23\1\22\1\12\1\7"+
    "\1\12\1\17\3\12\1\11\1\20\1\6\1\4\1\12\1\5\1\12"+
    "\1\21\6\12\4\0\41\13\2\0\4\12\4\0\1\12\2\0\1\13"+
    "\7\0\1\12\4\0\1\12\5\0\27\12\1\0\37\12\1\0\u013f\12"+
    "\31\0\162\12\4\0\14\12\16\0\5\12\11\0\1\12\21\0\130\13"+
    "\5\0\23\13\12\0\1\12\13\0\1\12\1\0\3\12\1\0\1\12"+
    "\1\0\24\12\1\0\54\12\1\0\46\12\1\0\5\12\4\0\202\12"+
    "\1\0\4\13\3\0\105\12\1\0\46\12\2\0\2\12\6\0\20\12"+
    "\41\0\46\12\2\0\1\12\7\0\47\12\11\0\21\13\1\0\27\13"+
    "\1\0\3\13\1\0\1\13\1\0\2\13\1\0\1\13\13\0\33\12"+
    "\5\0\3\12\15\0\4\13\14\0\6\13\13\0\32\12\5\0\13\12"+
    "\16\13\7\0\12\14\4\0\2\12\1\13\143\12\1\0\1\12\10\13"+
    "\1\0\6\13\2\12\2\13\1\0\4\13\2\12\12\14\3\12\2\0"+
    "\1\12\17\0\1\13\1\12\1\13\36\12\33\13\2\0\3\12\60\0"+
    "\46\12\13\13\1\12\u014f\0\3\13\66\12\2\0\1\13\1\12\20\13"+
    "\2\0\1\12\4\13\3\0\12\12\2\13\2\0\12\14\21\0\3\13"+
    "\1\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12"+
    "\3\0\4\12\2\0\1\13\1\12\7\13\2\0\2\13\2\0\3\13"+
    "\11\0\1\13\4\0\2\12\1\0\3\12\2\13\2\0\12\14\4\12"+
    "\15\0\3\13\1\0\6\12\4\0\2\12\2\0\26\12\1\0\7\12"+
    "\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\13\1\0\5\13"+
    "\4\0\2\13\2\0\3\13\13\0\4\12\1\0\1\12\7\0\12\14"+
    "\2\13\3\12\14\0\3\13\1\0\11\12\1\0\3\12\1\0\26\12"+
    "\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\13\1\12\10\13"+
    "\1\0\3\13\1\0\3\13\2\0\1\12\17\0\2\12\2\13\2\0"+
    "\12\14\1\0\1\12\17\0\3\13\1\0\10\12\2\0\2\12\2\0"+
    "\26\12\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\13\1\12"+
    "\6\13\3\0\2\13\2\0\3\13\10\0\2\13\4\0\2\12\1\0"+
    "\3\12\4\0\12\14\1\0\1\12\20\0\1\13\1\12\1\0\6\12"+
    "\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12"+
    "\3\0\2\12\3\0\3\12\3\0\10\12\1\0\3\12\4\0\5\13"+
    "\3\0\3\13\1\0\4\13\11\0\1\13\17\0\11\14\11\0\1\12"+
    "\7\0\3\13\1\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12"+
    "\1\0\5\12\4\0\7\13\1\0\3\13\1\0\4\13\7\0\2\13"+
    "\11\0\2\12\4\0\12\14\22\0\2\13\1\0\10\12\1\0\3\12"+
    "\1\0\27\12\1\0\12\12\1\0\5\12\2\0\1\13\1\12\7\13"+
    "\1\0\3\13\1\0\4\13\7\0\2\13\7\0\1\12\1\0\2\12"+
    "\4\0\12\14\22\0\2\13\1\0\10\12\1\0\3\12\1\0\27\12"+
    "\1\0\20\12\4\0\6\13\2\0\3\13\1\0\4\13\11\0\1\13"+
    "\10\0\2\12\4\0\12\14\22\0\2\13\1\0\22\12\3\0\30\12"+
    "\1\0\11\12\1\0\1\12\2\0\7\12\3\0\1\13\4\0\6\13"+
    "\1\0\1\13\1\0\10\13\22\0\2\13\15\0\60\12\1\13\2\12"+
    "\7\13\4\0\10\12\10\13\1\0\12\14\47\0\2\12\1\0\1\12"+
    "\2\0\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12"+
    "\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\4\12"+
    "\1\13\2\12\6\13\1\0\2\13\1\12\2\0\5\12\1\0\1\12"+
    "\1\0\6\13\2\0\12\14\2\0\2\12\42\0\1\12\27\0\2\13"+
    "\6\0\12\14\13\0\1\13\1\0\1\13\1\0\1\13\4\0\2\13"+
    "\10\12\1\0\42\12\6\0\24\13\1\0\2\13\4\12\4\0\10\13"+
    "\1\0\44\13\11\0\1\13\71\0\42\12\1\0\5\12\1\0\2\12"+
    "\1\0\7\13\3\0\4\13\6\0\12\14\6\0\6\12\4\13\106\0"+
    "\46\12\12\0\51\12\7\0\132\12\5\0\104\12\5\0\122\12\6\0"+
    "\7\12\1\0\77\12\1\0\1\12\1\0\4\12\2\0\7\12\1\0"+
    "\1\12\1\0\4\12\2\0\47\12\1\0\1\12\1\0\4\12\2\0"+
    "\37\12\1\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0"+
    "\4\12\2\0\7\12\1\0\7\12\1\0\27\12\1\0\37\12\1\0"+
    "\1\12\1\0\4\12\2\0\7\12\1\0\47\12\1\0\23\12\16\0"+
    "\11\14\56\0\125\12\14\0\u026c\12\2\0\10\12\12\0\32\12\5\0"+
    "\113\12\3\0\3\12\17\0\15\12\1\0\4\12\3\13\13\0\22\12"+
    "\3\13\13\0\22\12\2\13\14\0\15\12\1\0\3\12\1\0\2\13"+
    "\14\0\64\12\40\13\3\0\1\12\3\0\2\12\1\13\2\0\12\14"+
    "\41\0\3\13\2\0\12\14\6\0\130\12\10\0\51\12\1\13\126\0"+
    "\35\12\3\0\14\13\4\0\14\13\12\0\12\14\36\12\2\0\5\12"+
    "\u038b\0\154\12\224\0\234\12\4\0\132\12\6\0\26\12\2\0\6\12"+
    "\2\0\46\12\2\0\6\12\2\0\10\12\1\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\37\12\2\0\65\12\1\0\7\12\1\0\1\12"+
    "\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0\15\12"+
    "\5\0\3\12\1\0\7\12\17\0\4\13\32\0\5\13\20\0\2\12"+
    "\23\0\1\12\13\0\4\13\6\0\6\13\1\0\1\12\15\0\1\12"+
    "\40\0\22\12\36\0\15\13\4\0\1\13\3\0\6\13\27\0\1\12"+
    "\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\4\12\1\0\3\12\1\0\7\12"+
    "\3\0\3\12\5\0\5\12\26\0\44\12\u0e81\0\3\12\31\0\11\12"+
    "\6\13\1\0\5\12\2\0\5\12\4\0\126\12\2\0\2\13\2\0"+
    "\3\12\1\0\137\12\5\0\50\12\4\0\136\12\21\0\30\12\70\0"+
    "\20\12\u0200\0\u19b6\12\112\0\u51a6\12\132\0\u048d\12\u0773\0\u2ba4\12\u215c\0"+
    "\u012e\12\2\0\73\12\225\0\7\12\14\0\5\12\5\0\1\12\1\13"+
    "\12\12\1\0\15\12\1\0\5\12\1\0\1\12\1\0\2\12\1\0"+
    "\2\12\1\0\154\12\41\0\u016b\12\22\0\100\12\2\0\66\12\50\0"+
    "\15\12\3\0\20\13\20\0\4\13\17\0\2\12\30\0\3\12\31\0"+
    "\1\12\6\0\5\12\1\0\207\12\2\0\1\13\4\0\1\12\13\0"+
    "\12\14\7\0\32\12\4\0\1\12\1\0\32\12\12\0\132\12\3\0"+
    "\6\12\2\0\6\12\2\0\6\12\2\0\3\12\3\0\2\12\3\0"+
    "\2\12\22\0\3\13\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\3\1\4\1\1\1\3\1\5"+
    "\1\6\2\3\1\7\3\3\1\10\1\3\1\11\2\3"+
    "\1\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[24];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\26\0\54\0\26\0\102\0\130\0\156\0\204"+
    "\0\232\0\260\0\26\0\26\0\306\0\334\0\26\0\362"+
    "\0\u0108\0\u011e\0\156\0\u0134\0\156\0\u014a\0\u0160\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[24];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\5\7\1\2\1\10"+
    "\1\11\1\2\1\12\4\7\1\13\1\14\30\0\1\4"+
    "\27\0\1\7\1\15\7\7\2\0\5\7\6\0\11\7"+
    "\2\0\3\7\1\16\1\7\6\0\11\7\2\0\5\7"+
    "\16\0\1\10\27\0\1\17\13\0\11\7\2\0\1\7"+
    "\1\20\3\7\6\0\2\7\1\21\6\7\2\0\5\7"+
    "\6\0\4\7\1\22\4\7\2\0\5\7\6\0\11\7"+
    "\2\0\2\7\1\23\2\7\6\0\3\7\1\24\5\7"+
    "\2\0\5\7\6\0\11\7\2\0\4\7\1\25\6\0"+
    "\1\7\1\26\7\7\2\0\5\7\6\0\4\7\1\27"+
    "\4\7\2\0\5\7\6\0\5\7\1\30\3\7\2\0"+
    "\5\7\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\2\11\2\1\1\11"+
    "\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[24];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Symbole creerSymbole(String representation, int type) {
    return new Symbole(representation,type,yyline,yycolumn);
  }

  private Symbole creerSymbole(String representation, int type, Object valeur) {
    return new Symbole(representation,type,valeur,yyline,yycolumn);
  }  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerInit(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScannerInit(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1708) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, ScannerException
 {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* on ignore les blancs */
          }
        case 11: break;
        case 6: 
          { // on a reconnu un ","
  return creerSymbole("SEPVAR",TypeSymboles.SEPVAR);
          }
        case 12: break;
        case 7: 
          { // on a reconnu un opérateur d'affectation
  return creerSymbole("AFF",TypeSymboles.AFF);
          }
        case 13: break;
        case 3: 
          { // on a reconnu un identificateur, par la suite il
		  // faudra lui associer par ex son nom : on utilise
		  // yytext() qui représente la portion du texte
		  // d'entrée reconnue 
  return creerSymbole("IDENT",TypeSymboles.IDENT,yytext());
          }
        case 14: break;
        case 8: 
          { // on a reconnu le mot-clé int
  return creerSymbole("DECLINT",TypeSymboles.DECLINT);
          }
        case 15: break;
        case 5: 
          { // on a reconnu un ";"
  return creerSymbole("FININSTR",TypeSymboles.FININSTR);
          }
        case 16: break;
        case 9: 
          { // on a reconnu un read
  return creerSymbole("READ",TypeSymboles.READ);
          }
        case 17: break;
        case 4: 
          { // on a reconnu un entier, par la suite il faudra lui
	  // associer par ex sa valeur de type Integer
  return creerSymbole("ENTIER", TypeSymboles.INTEGER, yytext());
          }
        case 18: break;
        case 10: 
          { // on a reconnu le mot-clé program
  return creerSymbole("PROG",TypeSymboles.PROG);
          }
        case 19: break;
        case 1: 
          { // erreur : .|\n désigne n'importe quel caractère non reconnu
      // par une des règles précédentes 
  throw new ScannerException("symbole inconnu, caractère " + yytext() + 
				 " ligne " + yyline + " colonne " + yycolumn);
          }
        case 20: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return new Symbole(TypeSymboles.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
