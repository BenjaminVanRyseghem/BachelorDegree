/* The following code was generated by JFlex 1.4.3 on 10/5/11 4:06 PM */

/*****************************************************
 * Analyseur lexical pour Init version simple
 * fichier de description pour JFlex
 * produit anLexInit/ScannerInit.java
 * M. Lepan & M. Van Ryseghem 
 * 2011/10/05
 ****************************************************/

/***********************************************************************
 * Première partie : code utilisateur inclus tel quel dans le fichier
 * .java généré. On met typiquement ici les déclarations de paquetage
 * (package) et les importations de classes (import).
 ***********************************************************************/

// déclaration du paquetage auquel appartient la classe générée
package planningMaster.analyseurs;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/5/11 4:06 PM from the specification file
 * <tt>spec/lexiquePlanning.lex</tt>
 */
public class ScannerPlanning implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int A = 2;
  public static final int YYINITIAL = 0;
  public static final int C = 6;
  public static final int B = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\44\13\0\1\21"+
    "\1\20\2\0\1\13\1\7\1\10\1\12\1\14\1\15\1\16\3\4"+
    "\1\0\1\22\5\0\1\5\5\5\1\5\1\5\1\5\2\5\1\5"+
    "\3\5\1\40\1\5\1\5\1\24\1\5\1\5\1\5\4\5\6\0"+
    "\1\33\1\6\1\30\1\32\1\23\1\6\1\42\1\17\1\27\2\6"+
    "\1\36\1\35\1\43\1\6\1\37\1\6\1\25\1\31\1\34\1\41"+
    "\1\26\4\6\u05e5\0\12\11\206\0\12\11\u026c\0\12\11\166\0\12\11"+
    "\166\0\12\11\166\0\12\11\166\0\12\11\167\0\11\11\166\0\12\11"+
    "\166\0\12\11\166\0\12\11\340\0\12\11\166\0\12\11\106\0\12\11"+
    "\u0116\0\12\11\u031f\0\11\11\u046e\0\12\11\46\0\12\11\u012c\0\12\11"+
    "\ue5c0\0\12\11\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\13\1\1\2\13\3\1\1\1\3"+
    "\3\0\1\4\10\0\1\5\2\3\2\4\6\3\1\4"+
    "\11\0\3\3\2\0\6\3\7\0\1\6\3\0\2\3"+
    "\1\0\2\3\1\6\3\3\4\0\1\7\3\0\2\3"+
    "\2\10\1\7\3\3\1\11\5\0\1\12\2\0\4\3"+
    "\1\12\2\3\5\0\4\3\1\13\5\0\4\3\1\14"+
    "\1\15\2\0\1\14\2\3\2\0\2\3\1\16\1\17"+
    "\1\16\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\224\0\336"+
    "\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206"+
    "\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e"+
    "\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456"+
    "\0\u047b\0\u04a0\0\u04c5\0\u0103\0\336\0\u04ea\0\u050f\0\u0534"+
    "\0\u0559\0\u057e\0\u05a3\0\u05c8\0\224\0\u05ed\0\u0612\0\u0456"+
    "\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a"+
    "\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\u0818\0\u083d\0\u0862"+
    "\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u0965\0\u098a"+
    "\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2"+
    "\0\u0ad7\0\u0afc\0\u0b21\0\224\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5"+
    "\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u02e4\0\u0c6e\0\u0c93\0\u0cb8"+
    "\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c\0\224\0\u0d71\0\u0d96\0\u0dbb"+
    "\0\u0de0\0\u0e05\0\u0e2a\0\u0e4f\0\u02e4\0\u0e74\0\u0e99\0\u0ebe"+
    "\0\u0ee3\0\u0f08\0\u0f2d\0\u0f52\0\u0f77\0\u0f9c\0\224\0\u0fc1"+
    "\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a\0\u02e4\0\u109f\0\u10c4"+
    "\0\u10e9\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2\0\u11c7\0\u11ec"+
    "\0\u1211\0\224\0\u1236\0\u125b\0\u1280\0\u12a5\0\u12ca\0\u12ef"+
    "\0\u1314\0\u1339\0\u135e\0\224\0\224\0\u1383\0\u13a8\0\u02e4"+
    "\0\u13cd\0\u13f2\0\u1417\0\u143c\0\u1461\0\u1486\0\224\0\224"+
    "\0\u02e4\0\u02e4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\10\1\14\4\10\4\5\1\15\1\11\4\5\1\16"+
    "\1\17\2\5\1\20\1\5\1\21\1\11\1\5\1\22"+
    "\1\5\1\23\1\5\1\6\2\7\1\24\1\25\1\26"+
    "\1\27\1\30\1\10\1\31\4\24\1\26\3\5\1\26"+
    "\1\25\4\26\1\32\1\33\2\26\1\34\1\26\1\35"+
    "\1\25\1\26\1\36\1\26\1\23\1\5\1\6\2\7"+
    "\1\10\1\37\1\5\1\12\1\13\1\10\1\14\4\10"+
    "\4\5\1\15\1\37\4\5\1\16\1\17\2\5\1\20"+
    "\1\5\1\21\1\37\1\5\1\22\1\5\1\23\1\5"+
    "\1\6\2\7\1\24\1\40\1\26\1\27\1\30\1\10"+
    "\1\31\4\24\1\26\3\5\1\26\1\40\4\26\1\32"+
    "\1\33\2\26\1\34\1\26\1\35\1\40\1\26\1\36"+
    "\1\26\1\23\47\0\1\7\43\0\1\41\2\42\13\0"+
    "\1\43\24\0\1\42\4\0\5\44\1\0\6\44\3\0"+
    "\21\44\2\0\1\41\2\42\1\45\2\0\10\45\1\43"+
    "\24\0\1\42\1\0\1\41\2\42\1\46\2\0\2\45"+
    "\1\46\3\45\2\46\1\43\24\0\1\42\1\0\1\41"+
    "\2\42\3\0\1\46\3\0\1\46\3\0\1\43\24\0"+
    "\1\42\24\0\1\47\53\0\1\50\44\0\1\51\44\0"+
    "\1\52\34\0\1\53\46\0\1\54\41\0\1\55\23\0"+
    "\1\41\1\42\1\56\5\26\1\0\5\26\1\57\24\26"+
    "\1\56\3\0\1\26\1\60\2\61\2\60\1\0\5\60"+
    "\1\61\3\26\21\61\1\26\3\0\6\26\1\0\33\26"+
    "\1\0\1\41\1\42\1\56\1\24\2\26\2\24\1\45"+
    "\5\24\1\57\24\26\1\56\1\0\1\41\1\42\1\56"+
    "\1\62\2\26\2\24\1\46\3\24\2\62\1\57\24\26"+
    "\1\56\1\0\1\41\1\42\1\56\3\26\1\62\1\26"+
    "\1\0\1\26\1\62\3\26\1\57\24\26\1\56\3\0"+
    "\6\26\1\0\21\26\1\63\11\26\3\0\6\26\1\0"+
    "\21\26\1\64\11\26\3\0\6\26\1\0\21\26\1\65"+
    "\11\26\3\0\6\26\1\0\11\26\1\66\21\26\3\0"+
    "\6\26\1\0\13\26\1\67\17\26\4\0\1\44\2\70"+
    "\2\44\1\0\5\44\1\70\3\0\21\70\4\0\1\26"+
    "\5\60\1\0\6\60\3\26\21\60\1\26\2\0\1\42"+
    "\1\0\5\71\1\0\6\71\3\0\21\71\5\0\5\71"+
    "\1\0\6\71\3\0\21\71\10\0\2\72\1\0\4\72"+
    "\1\73\27\0\1\41\2\42\40\0\1\42\23\0\1\74"+
    "\57\0\1\75\42\0\1\76\41\0\1\77\47\0\1\100"+
    "\43\0\1\101\14\0\1\26\5\102\1\0\6\102\3\26"+
    "\21\102\1\26\3\0\4\26\2\103\1\0\4\103\1\104"+
    "\26\26\1\0\1\105\1\106\1\107\1\60\2\61\2\60"+
    "\1\0\5\60\1\61\3\26\21\61\1\107\1\0\1\41"+
    "\1\42\1\56\5\26\1\0\32\26\1\56\3\0\6\26"+
    "\1\0\24\26\1\110\6\26\3\0\6\26\1\0\22\26"+
    "\1\111\10\26\3\0\6\26\1\0\17\26\1\112\13\26"+
    "\3\0\6\26\1\0\22\26\1\113\10\26\3\0\6\26"+
    "\1\0\21\26\1\114\11\26\1\0\1\115\2\116\1\44"+
    "\2\70\2\44\1\0\5\44\1\70\3\0\21\70\1\116"+
    "\1\0\1\117\2\120\5\71\1\0\6\71\3\0\21\71"+
    "\1\120\4\0\1\121\2\0\10\121\41\0\1\121\56\0"+
    "\1\122\55\0\1\123\31\0\1\124\55\0\1\125\37\0"+
    "\1\126\60\0\1\127\2\0\1\117\1\120\1\130\5\102"+
    "\1\0\6\102\3\26\21\102\1\130\3\0\1\26\1\131"+
    "\2\26\2\131\1\121\5\131\26\26\3\0\6\26\1\0"+
    "\1\26\1\131\31\26\2\0\1\106\2\0\1\132\16\0"+
    "\1\132\13\0\1\132\11\0\1\132\16\0\1\132\13\0"+
    "\1\132\7\0\2\26\1\133\3\26\1\0\12\26\1\133"+
    "\13\26\1\133\4\26\3\0\6\26\1\0\24\26\1\134"+
    "\6\26\3\0\6\26\1\0\11\26\1\135\21\26\3\0"+
    "\6\26\1\0\22\26\1\136\10\26\3\0\6\26\1\0"+
    "\15\26\1\137\15\26\3\0\6\26\1\0\31\26\1\140"+
    "\1\26\2\0\1\116\2\0\1\141\16\0\1\141\13\0"+
    "\1\141\11\0\1\141\16\0\1\141\13\0\1\141\6\0"+
    "\1\120\5\0\1\142\44\0\1\142\54\0\1\143\52\0"+
    "\1\144\41\0\1\145\44\0\1\146\55\0\1\147\42\0"+
    "\1\150\15\0\5\26\1\151\1\0\33\26\3\0\6\26"+
    "\1\0\6\26\1\152\24\26\5\0\2\153\10\0\1\153"+
    "\3\0\21\153\4\0\2\26\2\154\2\26\1\0\5\26"+
    "\1\154\3\26\21\154\1\26\3\0\6\26\1\0\11\26"+
    "\1\155\21\26\3\0\6\26\1\0\11\26\1\156\21\26"+
    "\3\0\6\26\1\0\22\26\1\157\10\26\3\0\6\26"+
    "\1\0\20\26\1\160\12\26\5\0\2\161\10\0\1\161"+
    "\3\0\21\161\14\0\1\162\35\0\1\163\2\0\1\164"+
    "\1\165\6\163\55\0\1\166\42\0\1\167\42\0\1\170"+
    "\44\0\1\171\24\0\6\26\1\0\1\26\1\172\31\26"+
    "\3\0\1\26\1\173\2\26\1\174\1\175\1\163\5\173"+
    "\26\26\1\0\1\105\2\106\1\0\2\153\10\0\1\153"+
    "\3\0\21\153\1\106\1\0\1\105\1\106\1\107\1\26"+
    "\2\154\2\26\1\0\5\26\1\154\3\26\21\154\1\107"+
    "\3\0\6\26\1\0\13\26\1\176\17\26\3\0\6\26"+
    "\1\0\11\26\1\177\21\26\3\0\6\26\1\0\11\26"+
    "\1\200\21\26\1\0\1\115\2\116\1\0\2\161\10\0"+
    "\1\161\3\0\21\161\1\116\4\0\1\201\2\0\10\201"+
    "\45\0\1\202\31\0\1\163\2\0\10\163\1\202\34\0"+
    "\2\163\1\0\3\163\2\0\1\202\55\0\1\203\54\0"+
    "\1\204\44\0\1\205\7\0\1\26\1\206\2\26\2\206"+
    "\1\201\5\206\26\26\3\0\6\26\1\0\5\26\1\207"+
    "\25\26\3\0\1\26\1\173\2\26\2\173\1\163\5\173"+
    "\1\207\25\26\3\0\4\26\2\173\1\0\3\173\2\26"+
    "\1\207\25\26\3\0\6\26\1\0\26\26\1\210\4\26"+
    "\3\0\6\26\1\0\26\26\1\211\4\26\4\0\1\212"+
    "\2\0\10\212\35\0\2\213\1\0\4\213\1\214\51\0"+
    "\1\215\54\0\1\216\44\0\1\217\14\0\6\26\1\212"+
    "\33\26\3\0\4\26\2\220\1\0\4\220\1\221\26\26"+
    "\3\0\6\26\1\0\21\26\1\222\11\26\3\0\6\26"+
    "\1\0\21\26\1\223\11\26\4\0\1\224\2\0\10\224"+
    "\41\0\1\224\62\0\1\225\54\0\1\226\44\0\1\227"+
    "\6\0\1\26\1\230\2\26\2\230\1\224\5\230\26\26"+
    "\3\0\6\26\1\0\1\26\1\230\31\26\3\0\6\26"+
    "\1\0\27\26\1\231\3\26\3\0\6\26\1\0\27\26"+
    "\1\232\3\26\31\0\1\233\44\0\1\234\16\0\6\26"+
    "\1\0\17\26\1\235\13\26\3\0\6\26\1\0\17\26"+
    "\1\236\13\26\23\0\1\237\44\0\1\240\24\0\6\26"+
    "\1\0\11\26\1\241\21\26\3\0\6\26\1\0\11\26"+
    "\1\242\21\26";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5291];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\31\1\3\0\1\1\10\0"+
    "\1\11\13\1\11\0\3\1\2\0\6\1\7\0\1\11"+
    "\3\0\2\1\1\0\6\1\4\0\1\11\3\0\11\1"+
    "\5\0\1\11\2\0\7\1\5\0\4\1\1\11\5\0"+
    "\4\1\2\11\2\0\3\1\2\0\2\1\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Symbole creerSymbole(String representation, int type) {
    return new Symbole(representation,type,yyline,yycolumn);
  }

  private Symbole creerSymbole(String representation, int type, Object valeur) {
    return new Symbole(representation,type,valeur,yyline,yycolumn);
  }  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerPlanning(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScannerPlanning(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, ScannerException
 {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { // on a reconnu un read
  return creerSymbole("grandePause",TypeSymboles.GRANDEPAUSE);
          }
        case 16: break;
        case 8: 
          { yybegin(B);
	  	return creerSymbole("NAME",TypeSymboles.NAME,yytext());
          }
        case 17: break;
        case 12: 
          { yybegin(A);
  	return creerSymbole("SLOT", TypeSymboles.SLOT, yytext());
          }
        case 18: break;
        case 5: 
          { // on a reconnu un ";"
	return creerSymbole("SEPARATOR",TypeSymboles.SEPARATOR);
          }
        case 19: break;
        case 2: 
          { /* on ne fait rien */
          }
        case 20: break;
        case 10: 
          { // on a reconnu le mot-clé int
  return creerSymbole("master",TypeSymboles.MASTERCST);
          }
        case 21: break;
        case 6: 
          { // on a reconnu le mot-clé program
  return creerSymbole("date",TypeSymboles.DATECST);
          }
        case 22: break;
        case 9: 
          { yybegin(C);
	  	return creerSymbole("ENTREPRISE",TypeSymboles.ENTREPRISE,yytext());
          }
        case 23: break;
        case 11: 
          { return creerSymbole("DATE",TypeSymboles.DATE,yytext());
          }
        case 24: break;
        case 13: 
          { return creerSymbole("MASTER",TypeSymboles.MASTER,yytext());
          }
        case 25: break;
        case 3: 
          { // on a reconnu un opérateur d'affectation
		yybegin(YYINITIAL);
	  	return creerSymbole("OPTIONS",TypeSymboles.OPTIONS, yytext());
          }
        case 26: break;
        case 14: 
          { // on a reconnu un read
  return creerSymbole("petitePause",TypeSymboles.PETITEPAUSE);
          }
        case 27: break;
        case 7: 
          { // on a reconnu un read
  return creerSymbole("room",TypeSymboles.ROOMCST);
          }
        case 28: break;
        case 4: 
          { return creerSymbole("ROOM",TypeSymboles.ROOM,yytext());
          }
        case 29: break;
        case 1: 
          { // erreur : .|\n désigne n'importe quel caractère non reconnu
      // par une des règles précédentes 
  throw new ScannerException("symbole inconnu, caractère " + yytext() + 
				 " ligne " + yyline + " colonne " + yycolumn);
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return new Symbole(TypeSymboles.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
