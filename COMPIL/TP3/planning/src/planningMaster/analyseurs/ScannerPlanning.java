/* The following code was generated by JFlex 1.4.3 on 10/6/11 11:40 AM */

/*****************************************************
 * Analyseur lexical pour Init version simple
 * fichier de description pour JFlex
 * produit anLexInit/ScannerInit.java
 * M. Lepan & M. Van Ryseghem 
 * 2011/10/05
 ****************************************************/

/***********************************************************************
 * Première partie : code utilisateur inclus tel quel dans le fichier
 * .java généré. On met typiquement ici les déclarations de paquetage
 * (package) et les importations de classes (import).
 ***********************************************************************/

// déclaration du paquetage auquel appartient la classe générée
package planningMaster.analyseurs;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/6/11 11:40 AM from the specification file
 * <tt>spec/lexiquePlanning.lex</tt>
 */
public class ScannerPlanning implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int A = 2;
  public static final int YYINITIAL = 0;
  public static final int C = 6;
  public static final int B = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\13\0\1\21"+
    "\1\20\2\0\1\13\1\7\1\10\1\12\1\14\1\15\1\16\3\4"+
    "\1\0\1\22\5\0\1\24\5\5\1\25\1\5\1\23\2\5\1\26"+
    "\3\5\1\47\1\5\1\30\1\32\1\27\1\5\1\40\4\5\6\0"+
    "\1\42\1\6\1\36\1\41\1\31\1\6\1\51\1\17\1\35\2\6"+
    "\1\45\1\44\1\52\1\6\1\46\1\6\1\33\1\37\1\43\1\50"+
    "\1\34\4\6\u05e5\0\12\11\206\0\12\11\u026c\0\12\11\166\0\12\11"+
    "\166\0\12\11\166\0\12\11\166\0\12\11\167\0\11\11\166\0\12\11"+
    "\166\0\12\11\166\0\12\11\340\0\12\11\166\0\12\11\106\0\12\11"+
    "\u0116\0\12\11\u031f\0\11\11\u046e\0\12\11\46\0\12\11\u012c\0\12\11"+
    "\ue5c0\0\12\11\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\5\4\1\6"+
    "\16\4\14\2\14\3\3\0\1\7\3\0\3\7\15\0"+
    "\12\2\12\3\5\0\1\7\1\10\1\7\13\0\1\10"+
    "\1\0\3\2\1\10\7\2\3\3\1\10\7\3\10\0"+
    "\1\11\4\0\1\1\3\2\1\11\3\2\3\3\1\11"+
    "\3\3\6\0\1\12\3\0\1\2\1\12\3\2\2\3"+
    "\1\12\3\3\4\13\4\0\1\14\2\0\1\2\1\14"+
    "\2\2\4\3\1\14\2\3\4\0\3\2\4\3\5\0"+
    "\3\2\5\3\1\15\1\10\2\0\2\2\1\15\2\3"+
    "\2\0\2\2\2\3\1\16\1\17\1\16\1\17\1\16"+
    "\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\254\0\u0102"+
    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\254\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df"+
    "\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637"+
    "\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f"+
    "\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u012d\0\u08bc"+
    "\0\u0102\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9"+
    "\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0331\0\u0aeb\0\u0b16"+
    "\0\u0b41\0\u045e\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43"+
    "\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b"+
    "\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3"+
    "\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u012d\0\u0fca\0\u0ff5\0\u1020"+
    "\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178"+
    "\0\u11a3\0\u1178\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u045e\0\u127a"+
    "\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2"+
    "\0\u13fd\0\u0662\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff"+
    "\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657"+
    "\0\u1682\0\254\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1178\0\u1759"+
    "\0\u1784\0\u17af\0\u045e\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886"+
    "\0\u18b1\0\u0662\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3"+
    "\0\u19de\0\u1a09\0\u1a34\0\254\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0"+
    "\0\u045e\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u0662\0\u1be2"+
    "\0\u1c0d\0\u1c38\0\u0866\0\u0ef3\0\254\0\u1580\0\u1c63\0\u1c8e"+
    "\0\u1cb9\0\u1ce4\0\254\0\u1d0f\0\u1d3a\0\u1d65\0\u045e\0\u1d90"+
    "\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u0662\0\u1e92\0\u1ebd"+
    "\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea\0\u2015"+
    "\0\u2040\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d"+
    "\0\u2198\0\u21c3\0\u21ee\0\u2219\0\u2244\0\u226f\0\u229a\0\u22c5"+
    "\0\254\0\254\0\u22f0\0\u231b\0\u2346\0\u2371\0\u0662\0\u239c"+
    "\0\u23c7\0\u23f2\0\u241d\0\u2448\0\u2473\0\u249e\0\u24c9\0\254"+
    "\0\254\0\u045e\0\u045e\0\u0662\0\u0662";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\10\1\14\4\10\3\5\1\15\1\16\3\11\1\17"+
    "\1\11\1\20\1\11\4\5\1\21\1\11\1\22\2\5"+
    "\1\23\1\5\1\24\1\11\1\5\1\25\2\5\1\6"+
    "\2\7\1\26\1\27\1\5\1\30\1\31\6\26\3\5"+
    "\1\15\1\32\3\27\1\33\1\27\1\20\1\27\4\5"+
    "\1\21\1\27\1\22\2\5\1\23\1\5\1\24\1\27"+
    "\1\5\1\25\2\5\1\6\2\7\1\34\2\35\1\36"+
    "\1\37\1\26\5\34\1\35\2\5\1\15\1\40\3\35"+
    "\1\41\1\35\1\42\5\35\1\43\1\35\1\44\2\35"+
    "\1\45\1\35\1\46\2\35\1\47\1\35\1\5\1\6"+
    "\2\7\1\50\2\51\1\52\1\53\1\26\5\50\1\51"+
    "\2\5\1\15\1\54\3\51\1\55\1\51\1\56\5\51"+
    "\1\57\1\51\1\60\2\51\1\61\1\51\1\62\2\51"+
    "\1\63\1\51\55\0\1\7\51\0\3\64\5\65\1\0"+
    "\5\65\1\66\3\0\30\65\4\0\5\67\1\0\6\67"+
    "\3\0\30\67\1\0\3\64\1\70\2\65\2\70\1\71"+
    "\5\70\1\66\3\0\30\65\1\0\3\64\1\72\2\65"+
    "\2\70\1\64\3\70\2\72\1\66\3\0\30\65\1\0"+
    "\3\64\3\65\1\72\1\65\1\0\1\65\1\72\3\65"+
    "\1\66\3\0\30\65\4\0\5\67\1\0\6\67\3\0"+
    "\1\67\1\73\13\67\1\74\12\67\4\0\5\67\1\0"+
    "\6\67\3\0\1\75\27\67\32\0\1\76\62\0\1\77"+
    "\52\0\1\100\52\0\1\101\41\0\1\102\54\0\1\103"+
    "\36\0\1\104\40\0\2\105\10\0\1\105\3\0\30\105"+
    "\4\0\1\106\2\0\10\106\1\104\42\0\2\106\1\0"+
    "\3\106\2\0\1\104\40\0\2\105\10\0\1\105\3\0"+
    "\1\105\1\107\13\105\1\110\12\105\5\0\2\105\10\0"+
    "\1\105\3\0\1\111\27\105\1\0\3\112\5\35\1\0"+
    "\5\35\1\113\3\0\30\35\1\0\3\112\5\35\1\0"+
    "\6\35\3\0\30\35\1\0\3\112\1\34\2\35\2\34"+
    "\1\106\5\34\1\113\3\0\30\35\1\0\3\112\3\35"+
    "\2\34\1\0\3\34\2\35\1\113\3\0\30\35\1\0"+
    "\3\112\5\35\1\0\6\35\3\0\1\35\1\114\13\35"+
    "\1\115\12\35\1\0\3\112\5\35\1\0\6\35\3\0"+
    "\1\116\27\35\1\0\3\112\5\35\1\0\6\35\3\0"+
    "\7\35\1\117\20\35\1\0\3\112\5\35\1\0\6\35"+
    "\3\0\17\35\1\120\10\35\1\0\3\112\5\35\1\0"+
    "\6\35\3\0\17\35\1\121\10\35\1\0\3\112\5\35"+
    "\1\0\6\35\3\0\17\35\1\122\10\35\1\0\3\112"+
    "\5\35\1\0\6\35\3\0\6\35\1\123\21\35\1\0"+
    "\3\112\5\35\1\0\6\35\3\0\10\35\1\124\17\35"+
    "\3\0\6\51\1\0\5\51\1\125\33\51\3\0\6\51"+
    "\1\0\41\51\3\0\1\51\1\50\2\51\2\50\1\106"+
    "\5\50\1\125\33\51\3\0\4\51\2\50\1\0\3\50"+
    "\2\51\1\125\33\51\3\0\6\51\1\0\12\51\1\126"+
    "\13\51\1\127\12\51\3\0\6\51\1\0\11\51\1\130"+
    "\27\51\3\0\6\51\1\0\20\51\1\131\20\51\3\0"+
    "\6\51\1\0\30\51\1\132\10\51\3\0\6\51\1\0"+
    "\30\51\1\133\10\51\3\0\6\51\1\0\30\51\1\134"+
    "\10\51\3\0\6\51\1\0\17\51\1\135\21\51\3\0"+
    "\6\51\1\0\21\51\1\136\17\51\1\0\3\64\5\65"+
    "\1\0\6\65\3\0\30\65\1\0\3\137\4\65\1\140"+
    "\1\0\6\65\3\0\30\65\1\0\3\137\3\65\1\141"+
    "\1\142\1\0\4\141\1\143\1\65\3\0\30\65\1\0"+
    "\3\72\4\65\1\140\1\0\5\65\1\66\3\0\30\65"+
    "\1\0\3\72\4\65\1\140\1\0\6\65\3\0\30\65"+
    "\4\0\5\67\1\0\6\67\3\0\2\67\1\144\25\67"+
    "\4\0\5\67\1\0\6\67\3\0\1\145\27\67\4\0"+
    "\5\67\1\0\6\67\3\0\1\146\27\67\31\0\1\147"+
    "\66\0\1\150\50\0\1\151\46\0\1\152\56\0\1\153"+
    "\51\0\1\154\17\0\2\155\1\0\4\155\1\156\35\0"+
    "\3\157\1\0\1\160\1\105\10\0\1\105\3\0\6\160"+
    "\1\105\1\160\5\105\1\160\6\105\1\160\3\105\1\0"+
    "\3\157\1\0\1\160\1\105\10\0\1\105\3\0\2\160"+
    "\1\161\3\160\1\105\1\160\5\105\1\160\6\105\1\160"+
    "\3\105\1\0\3\157\1\0\1\160\1\105\10\0\1\105"+
    "\3\0\1\162\5\160\1\105\1\160\5\105\1\160\6\105"+
    "\1\160\3\105\1\0\3\157\1\0\1\160\1\105\10\0"+
    "\1\105\3\0\1\163\5\160\1\105\1\160\5\105\1\160"+
    "\6\105\1\160\3\105\1\0\3\112\3\35\2\164\1\0"+
    "\4\164\1\165\1\35\3\0\30\35\1\0\3\112\5\35"+
    "\1\0\6\35\3\0\2\35\1\166\25\35\1\0\3\112"+
    "\5\35\1\0\6\35\3\0\1\167\27\35\1\0\3\112"+
    "\5\35\1\0\6\35\3\0\1\170\27\35\1\0\3\112"+
    "\5\35\1\0\6\35\3\0\6\35\1\171\21\35\1\0"+
    "\3\112\5\35\1\0\6\35\3\0\22\35\1\172\5\35"+
    "\1\0\3\112\5\35\1\0\6\35\3\0\20\35\1\173"+
    "\7\35\1\0\3\112\5\35\1\0\6\35\3\0\14\35"+
    "\1\174\13\35\1\0\3\112\5\35\1\0\6\35\3\0"+
    "\20\35\1\175\7\35\1\0\3\112\5\35\1\0\6\35"+
    "\3\0\17\35\1\176\10\35\3\0\4\51\2\177\1\0"+
    "\4\177\1\200\34\51\3\0\6\51\1\0\13\51\1\201"+
    "\25\51\3\0\6\51\1\0\11\51\1\202\27\51\3\0"+
    "\6\51\1\0\11\51\1\203\27\51\3\0\6\51\1\0"+
    "\17\51\1\204\21\51\3\0\6\51\1\0\33\51\1\205"+
    "\5\51\3\0\6\51\1\0\31\51\1\206\7\51\3\0"+
    "\6\51\1\0\25\51\1\207\13\51\3\0\6\51\1\0"+
    "\31\51\1\210\7\51\3\0\6\51\1\0\30\51\1\211"+
    "\10\51\1\0\3\137\4\0\1\212\43\0\3\137\4\65"+
    "\1\140\1\0\1\65\1\213\4\65\3\0\30\65\1\0"+
    "\3\137\1\214\2\65\1\214\1\215\1\216\5\214\1\65"+
    "\3\0\30\65\1\0\3\137\1\214\2\65\1\214\1\215"+
    "\1\216\1\214\1\217\3\214\1\65\3\0\30\65\1\0"+
    "\3\137\4\65\1\140\1\0\1\65\1\214\4\65\3\0"+
    "\30\65\4\0\5\67\1\0\6\67\3\0\3\67\1\145"+
    "\24\67\4\0\5\67\1\0\6\67\3\0\5\67\1\145"+
    "\22\67\33\0\1\220\64\0\1\221\36\0\1\222\64\0"+
    "\1\223\44\0\1\224\67\0\1\225\4\0\1\216\2\0"+
    "\10\216\47\0\1\216\40\0\3\157\1\0\1\226\15\0"+
    "\6\226\1\0\1\226\5\0\1\226\6\0\1\226\4\0"+
    "\3\157\1\0\2\227\10\0\1\227\3\0\30\227\1\0"+
    "\3\157\1\0\2\227\10\0\1\227\3\0\3\227\1\162"+
    "\24\227\1\0\3\157\1\0\2\227\10\0\1\227\3\0"+
    "\5\227\1\162\22\227\1\0\3\112\1\230\2\35\2\230"+
    "\1\216\5\230\1\35\3\0\30\35\1\0\3\112\5\35"+
    "\1\0\1\35\1\230\4\35\3\0\30\35\1\0\3\112"+
    "\5\35\1\0\6\35\3\0\3\35\1\167\24\35\1\0"+
    "\3\112\5\35\1\0\6\35\3\0\5\35\1\167\22\35"+
    "\1\0\3\112\5\35\1\0\6\35\3\0\10\35\1\231"+
    "\17\35\1\0\3\112\5\35\1\0\6\35\3\0\22\35"+
    "\1\232\5\35\1\0\3\112\5\35\1\0\6\35\3\0"+
    "\6\35\1\233\21\35\1\0\3\112\5\35\1\0\6\35"+
    "\3\0\20\35\1\234\7\35\1\0\3\112\5\35\1\0"+
    "\6\35\3\0\12\35\1\235\15\35\1\0\3\112\5\35"+
    "\1\0\6\35\3\0\27\35\1\236\3\0\1\51\1\237"+
    "\2\51\2\237\1\216\5\237\34\51\3\0\6\51\1\0"+
    "\1\51\1\237\37\51\3\0\6\51\1\0\14\51\1\202"+
    "\24\51\3\0\6\51\1\0\16\51\1\202\22\51\3\0"+
    "\6\51\1\0\21\51\1\240\17\51\3\0\6\51\1\0"+
    "\33\51\1\241\5\51\3\0\6\51\1\0\17\51\1\242"+
    "\21\51\3\0\6\51\1\0\31\51\1\243\7\51\3\0"+
    "\6\51\1\0\23\51\1\244\15\51\3\0\6\51\1\0"+
    "\40\51\1\245\13\0\1\246\40\0\3\137\1\247\2\65"+
    "\1\247\1\250\1\251\5\247\1\65\3\0\30\65\1\0"+
    "\3\137\4\65\1\140\1\0\6\65\1\252\2\0\30\65"+
    "\1\0\3\137\4\65\1\140\1\0\1\65\1\213\4\65"+
    "\1\252\2\0\30\65\20\0\1\252\33\0\3\137\1\247"+
    "\2\65\1\247\1\250\1\251\5\247\1\65\1\252\2\0"+
    "\30\65\34\0\1\253\47\0\1\254\52\0\1\255\64\0"+
    "\1\256\50\0\1\257\16\0\2\227\10\0\1\227\3\0"+
    "\30\227\1\0\3\112\5\35\1\0\6\35\1\252\2\0"+
    "\30\35\1\0\3\112\5\35\1\0\6\35\3\0\11\35"+
    "\1\260\16\35\1\0\3\112\5\35\1\0\6\35\3\0"+
    "\6\35\1\261\21\35\1\0\3\112\5\35\1\0\6\35"+
    "\3\0\6\35\1\262\21\35\1\0\3\112\5\35\1\0"+
    "\6\35\3\0\20\35\1\263\7\35\1\0\3\112\5\35"+
    "\1\0\6\35\3\0\16\35\1\264\11\35\3\0\6\51"+
    "\1\0\6\51\1\265\32\51\3\0\6\51\1\0\22\51"+
    "\1\266\16\51\3\0\6\51\1\0\17\51\1\267\21\51"+
    "\3\0\6\51\1\0\17\51\1\270\21\51\3\0\6\51"+
    "\1\0\31\51\1\271\7\51\3\0\6\51\1\0\27\51"+
    "\1\272\11\51\4\0\1\251\2\0\10\251\35\0\3\137"+
    "\1\273\2\65\1\273\1\274\1\275\5\273\1\65\3\0"+
    "\30\65\1\0\3\137\1\273\2\65\1\273\1\274\1\275"+
    "\1\273\1\276\3\273\1\65\3\0\30\65\4\0\1\275"+
    "\2\0\10\275\40\0\1\277\2\0\1\300\1\301\6\277"+
    "\71\0\1\302\50\0\1\303\50\0\1\304\52\0\1\305"+
    "\22\0\3\112\5\35\1\0\6\35\3\0\12\35\1\306"+
    "\15\35\1\0\3\112\5\35\1\0\6\35\3\0\10\35"+
    "\1\307\17\35\1\0\3\112\5\35\1\0\6\35\3\0"+
    "\6\35\1\310\21\35\1\0\3\112\5\35\1\0\6\35"+
    "\3\0\6\35\1\311\21\35\3\0\1\51\1\312\2\51"+
    "\1\313\1\314\1\277\5\312\34\51\3\0\6\51\1\0"+
    "\23\51\1\315\15\51\3\0\6\51\1\0\21\51\1\316"+
    "\17\51\3\0\6\51\1\0\17\51\1\317\21\51\3\0"+
    "\6\51\1\0\17\51\1\320\21\51\17\0\1\321\37\0"+
    "\1\277\2\0\10\277\1\321\42\0\2\277\1\0\3\277"+
    "\2\0\1\321\71\0\1\322\63\0\1\323\52\0\1\324"+
    "\4\0\3\112\5\35\1\0\6\35\3\0\13\35\1\325"+
    "\14\35\1\0\3\112\5\35\1\0\6\35\3\0\24\35"+
    "\1\326\3\35\1\0\3\112\5\35\1\0\6\35\3\0"+
    "\24\35\1\327\3\35\3\0\6\51\1\0\5\51\1\330"+
    "\33\51\3\0\1\51\1\312\2\51\2\312\1\277\5\312"+
    "\1\330\33\51\3\0\4\51\2\312\1\0\3\312\2\51"+
    "\1\330\33\51\3\0\6\51\1\0\24\51\1\331\14\51"+
    "\3\0\6\51\1\0\35\51\1\332\3\51\3\0\6\51"+
    "\1\0\35\51\1\333\3\51\7\0\2\334\1\0\4\334"+
    "\1\335\65\0\1\336\63\0\1\337\52\0\1\340\11\0"+
    "\3\112\5\35\1\0\6\35\3\0\6\35\1\341\21\35"+
    "\1\0\3\112\5\35\1\0\6\35\3\0\17\35\1\342"+
    "\10\35\1\0\3\112\5\35\1\0\6\35\3\0\17\35"+
    "\1\343\10\35\3\0\4\51\2\344\1\0\4\344\1\345"+
    "\34\51\3\0\6\51\1\0\17\51\1\346\21\51\3\0"+
    "\6\51\1\0\30\51\1\347\10\51\3\0\6\51\1\0"+
    "\30\51\1\350\10\51\4\0\1\351\2\0\10\351\47\0"+
    "\1\351\76\0\1\352\63\0\1\353\52\0\1\354\3\0"+
    "\3\112\5\35\1\0\6\35\3\0\14\35\1\167\13\35"+
    "\1\0\3\112\5\35\1\0\6\35\3\0\25\35\1\355"+
    "\2\35\1\0\3\112\5\35\1\0\6\35\3\0\25\35"+
    "\1\356\2\35\3\0\1\51\1\357\2\51\2\357\1\351"+
    "\5\357\34\51\3\0\6\51\1\0\1\51\1\357\37\51"+
    "\3\0\6\51\1\0\25\51\1\202\13\51\3\0\6\51"+
    "\1\0\36\51\1\360\2\51\3\0\6\51\1\0\36\51"+
    "\1\361\2\51\37\0\1\362\52\0\1\363\14\0\3\112"+
    "\5\35\1\0\6\35\3\0\14\35\1\364\13\35\1\0"+
    "\3\112\5\35\1\0\6\35\3\0\14\35\1\365\13\35"+
    "\3\0\6\51\1\0\25\51\1\366\13\51\3\0\6\51"+
    "\1\0\25\51\1\367\13\51\31\0\1\370\52\0\1\371"+
    "\22\0\3\112\5\35\1\0\6\35\3\0\6\35\1\372"+
    "\21\35\1\0\3\112\5\35\1\0\6\35\3\0\6\35"+
    "\1\373\21\35\3\0\6\51\1\0\17\51\1\374\21\51"+
    "\3\0\6\51\1\0\17\51\1\375\21\51";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\1\11\1\1\1\11\5\1\1\11\46\1"+
    "\3\0\1\1\3\0\3\1\15\0\24\1\5\0\3\1"+
    "\13\0\1\1\1\0\26\1\10\0\1\11\4\0\17\1"+
    "\6\0\1\11\3\0\15\1\1\11\1\1\4\0\1\11"+
    "\2\0\13\1\4\0\7\1\5\0\10\1\2\11\2\0"+
    "\5\1\2\0\4\1\2\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Symbole creerSymbole(String representation, int type) {
    return new Symbole(representation,type,yyline,yycolumn);
  }

  private Symbole creerSymbole(String representation, int type, Object valeur) {
    return new Symbole(representation,type,valeur,yyline,yycolumn);
  }  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerPlanning(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScannerPlanning(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, ScannerException
 {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { yybegin(B);
  	return creerSymbole("NAME",TypeSymboles.NAME,yytext());
          }
        case 16: break;
        case 15: 
          { // on a reconnu un read
  return creerSymbole("grandePause",TypeSymboles.GRANDEPAUSE);
          }
        case 17: break;
        case 13: 
          { yybegin(A);
  	return creerSymbole("SLOT", TypeSymboles.SLOT, yytext());
          }
        case 18: break;
        case 2: 
          { yybegin(C);
  	return creerSymbole("ENTREPRISE",TypeSymboles.ENTREPRISE,yytext());
          }
        case 19: break;
        case 3: 
          { // on a reconnu un opérateur d'affectation
	yybegin(YYINITIAL);
  	return creerSymbole("OPTIONS",TypeSymboles.OPTIONS, yytext());
          }
        case 20: break;
        case 6: 
          { // on a reconnu un ";"
	return creerSymbole("SEPARATOR",TypeSymboles.SEPARATOR);
          }
        case 21: break;
        case 5: 
          { /* on ne fait rien */
          }
        case 22: break;
        case 12: 
          { // on a reconnu le mot-clé int
  return creerSymbole("master",TypeSymboles.MASTERCST);
          }
        case 23: break;
        case 9: 
          { // on a reconnu le mot-clé program
  return creerSymbole("date",TypeSymboles.DATECST);
          }
        case 24: break;
        case 11: 
          { return creerSymbole("DATE",TypeSymboles.DATE,yytext());
          }
        case 25: break;
        case 8: 
          { yybegin(YYINITIAL);
  	return creerSymbole("MASTER",TypeSymboles.MASTER,yytext());
          }
        case 26: break;
        case 14: 
          { // on a reconnu un read
  return creerSymbole("petitePause",TypeSymboles.PETITEPAUSE);
          }
        case 27: break;
        case 10: 
          { // on a reconnu un read
  return creerSymbole("room",TypeSymboles.ROOMCST);
          }
        case 28: break;
        case 7: 
          { return creerSymbole("ROOM",TypeSymboles.ROOM,yytext());
          }
        case 29: break;
        case 4: 
          { // erreur : .|\n désigne n'importe quel caractère non reconnu
      // par une des règles précédentes 
  throw new ScannerException("symbole inconnu, caractère " + yytext() + 
				 " ligne " + yyline + " colonne " + yycolumn);
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return new Symbole(TypeSymboles.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
