package planningMaster;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/** Generateur de planning format latex. */
public class GenerationLatexPlanningMaster {
    
	private static final String espace = "\\s+";
	private static final String espaces = "\\s*";
	private static final String mot = "\\w+";
	private static final String annee = "\\d{4}";
	private static final String jour = "([12]?\\d|30|31)";
	private static final String heure = "(\\d|1\\d|20|21|22|23|24)";
	private static final String minute = "([0-5]?\\d|60)";
	private static final String heureAndMinute = heure+"h"+minute;
	private static final String nom = "[A-z][a-z]*";
	private static final String phrase= mot+"("+mot+"|\\s|\\p{Punct})*";
	private static final String options = phrase + "(,"+espace+phrase+")*";
	
    // lit le planning ligne par ligne
    private LectureLigne lecteurDeLigne;
    // ecrit le planning Latex
    private EcritureTexte ecrivainLatex;
    protected String masterName, date, room;
    protected Pattern masterNamePattern, datePattern, roomPattern, descriptionPattern ;
   

    /** Seule "l'entree" est fournie au generateur a la construction.
     * "La sortie" doit etre calculee par le generateur : il doit
     * determiner le nom du fichier Latex.
     */
    public GenerationLatexPlanningMaster(LectureLigne in) {
    	this.lecteurDeLigne = in;
		masterNamePattern = Pattern.compile("master"+espace+"("+mot+")"+espaces);
		datePattern = Pattern.compile("date"+espace+"("+jour+espace+mot+espace+annee+")"+espaces);
	    roomPattern = Pattern.compile("salle\\s+([A-Z]\\d{2})");
	    descriptionPattern = Pattern.compile(espaces+"("+heureAndMinute+")-("+heureAndMinute+")"+espace+";"+espaces+"(("+nom+espace+")+"+nom+")?"+espace+";"+espaces+"("+phrase+")?"+espace+";"+espaces+"("+options+")?"+espaces);
    }

    /** Fixe l'objet ds lequel ecrire. */
    public void setOutput(EcritureTexte out) {
    	this.ecrivainLatex = out;
    }

    /** Retourne la prochaine ligne lue. */
    public String lireLigne() throws IOException {
		return this.lecteurDeLigne.lireLigne();
    }

    /** Ecrit la cha√Æne ds le latex genere. */
    public void ecrire(String s) {
    	this.ecrivainLatex.ecrire(s);
    }


    protected void extractInformationFrom(String ligne){
    	Matcher matcher;
    	
    	matcher = masterNamePattern.matcher(ligne);
    	if(matcher.matches()){
    		// line which define the master's name
    		masterName = matcher.group(1);
    		return;	
    	}
    	
    	matcher = datePattern.matcher(ligne);
    	if(matcher.matches()){
    		// line which define the date of the presentation
    		date = matcher.group(1);
    		return;	
    	}
    	matcher = roomPattern.matcher(ligne);
    	if(matcher.matches()){
    		// line which define the date of the presentation
    		room = matcher.group(1);
    		return;	
    	}
    	
    	matcher = descriptionPattern.matcher(ligne);
    	if(matcher.matches()){
    		// line which define the date of the presentation
    		this.ecrireLigneTableau(matcher.group(1), matcher.group(4), matcher.group(8), matcher.group(9) ,matcher.group(10));
    		
    		return;
    	}
    	else{
    		System.out.println(ligne);
    		System.out.println("I should throw an error here");
    	}
    	
    }
    
    protected void ecrireLigneTableau(String begHour, String endHour, String name, String company, String topic){
    	if (this.ecrivainLatex != null){
    		String result = "	"+ begHour + "-" + endHour + "&" + (name==null?"":name) + "&" + (company==null?"":company) + "&" + (topic==null?"":topic) +"\\\\ \\hline"+'\n';
    		this.ecrivainLatex.ecrire(result);
    	}
    	else{
    		System.out.println("Should throw an error");
    	}
    }
    
    protected String buildFileName(){
    	return this.masterName+"_"+this.date.replace(' ', '_')+"_"+this.room+".tex";
    }
    
    protected String buildBeginOfDocument(){
    	String result = "";
    	result += "\\newcommand{\\lemaster}{"+this.masterName+"}";
    	result += '\n';
    	result += "\\newcommand{\\ladate}{"+this.date+"}";
    	result += '\n';
    	result += "\\newcommand{\\lasalle}{"+this.room+"}";
    	result += '\n';
    	result += "\\title{\\huge Soutenances des master2}";
    	result += '\n';
    	result += "\\author{\\Huge \\lemaster}";
    	result += '\n';
    	result += "\\date{\\huge \\ladate - \\lasalle}";
    	result += '\n';
    	result += '\n';
       	result += "\\begin{document}";
       	result += '\n';
       	result += '\n';
       	result += "\\maketitle";
       	result += '\n';
       	result += "\\pagestyle{empty}";
       	result += '\n';
       	result += "\\Large";
       	result += '\n';
       	result += '\n';
       	result += "\\hspace*{-3cm}";
       	result += '\n';
       	result += "\\begin{tabular}[t]{|l|l|l|l|}\\hline";
       	result += '\n';
    	return result;
    }
    
    protected void writeBeginOfDocument(){
    	if (this.ecrivainLatex != null){
    		this.ecrivainLatex.ecrire(ConstantesLatexString.DEBUT_DOCUMENT);
    		this.ecrivainLatex.ecrire(this.buildBeginOfDocument());
    	}
    }
    
    
    /**  Genere le code Latex pour un planning. 
     * @param ligneLue la derniere ligne lue.
    */
    public void genererUnPlanning(String ligneLue) throws IOException, ErreurFormatException {
    	this.extractInformationFrom(ligneLue);
    	if ( this.ecrivainLatex == null && masterName != null && date != null && room != null ){
    		OutputStream stream = new FileOutputStream(this.buildFileName());
    		EcritureTexte output = new EcritureTexteFlot(stream);
    		this.setOutput(output);
    		this.writeBeginOfDocument();
    	}
    }
    
    
    protected void writeEndOfFile(){
    	if (this.ecrivainLatex != null){
    		String result = "\\end{tabular}\n\\end{document}";
    		this.ecrivainLatex.ecrire(result);
    	}
    	else{
    		System.out.println("throw error");
    	}
    }
    
    public void finDuFichier(){
    	this.writeEndOfFile();
    	this.ecrivainLatex.terminer();
    }
    
    public static void main (String args[])throws IOException, ErreurFormatException{
    	
    	/*
    	master TIIR
    	date 8 septembre 2011
    	salle A40*/
    	String ligne;
    	GenerationLatexPlanningMaster test = new GenerationLatexPlanningMaster (null);
    	ligne = "master TIIR";
    	test.genererUnPlanning(ligne);
    	ligne = "date 8 septembre 2011";
    	test.genererUnPlanning(ligne);
    	ligne = "salle A40";
    	test.genererUnPlanning(ligne);
    	ligne = "10h45-11h30 ; El Amrani Hassan ; Credit Cooperatif ; huis-close";
    	test.genererUnPlanning(ligne);
    	
/*		Pattern datePattern = Pattern.compile("([12]?\\d|30|31)");
    	Matcher matcher;
    	matcher = datePattern.matcher("|1");
    	System.out.println(matcher.matches());*/
    }
}